{
  "AccountName": "Name",
  "PermissionName": "Name",
  "FuncName": "Name",
  "MessageName": "FixedString32",
  "TypeName": "FixedString32",
  "AccountPermission": {
    "fields": {
      "account": "AccountName",
      "permission": "PermissionName"
    }
  },
  "Message": {
    "fields": {
      "code": "AccountName",
      "type": "FuncName",
      "authorization": "AccountPermission[]",
      "data": "Bytes"
    },
    "docs": {
      "code": "the contract defining the primary code to execute for code/type",
      "type": "the action to be taken",
      "authorization": "the accounts and permission levels provided",
      "data": "opaque data processed by code"
    }
  },
  "AccountPermissionWeight": {
    "fields": {
      "permission": "AccountPermission",
      "weight": "UInt16"
    }
  },
  "Transaction": {
    "fields": {
      "refBlockNum": "UInt16",
      "refBlockPrefix": "UInt32",
      "expiration": "Time",
      "scope": "AccountName[]",
      "readscope": "AccountName[]",
      "messages": "Message[]"
    },
    "docs": {
      "scope": "the data may be accessed while processing this transaction"
    }
  },
  "SignedTransaction": {
    "base": "Transaction",
    "fields": {
      "signatures": "Signature[]"
    }
  },
  "KeyPermissionWeight": {
    "fields": {
      "key": "PublicKey",
      "weight": "UInt16"
    }
  },
  "Authority": {
    "fields": {
      "threshold": "UInt32",
      "keys": "KeyPermissionWeight[]",
      "accounts": "AccountPermissionWeight[]"
    }
  },
  "BlockchainConfiguration": {
    "fields": {
      "maxBlockSize": "UInt32",
      "targetBlockSize": "UInt32",
      "maxStorageSize": "UInt64",
      "electedPay": "ShareType",
      "runnerUpPay": "ShareType",
      "minEosBalance": "ShareType",
      "maxTrxLifetime": "UInt32",
      "authDepthLimit": "UInt16",
      "maxTrxRuntime": "UInt32",
      "inlineDepthLimit": "UInt16",
      "maxInlineMsgSize": "UInt32",
      "maxGenTrxSize": "UInt32"
    }
  },
  "TypeDef": {
    "fields": {
      "newTypeName": "TypeName",
      "type": "TypeName"
    }
  },
  "Action": {
    "fields": {
      "action": "Name",
      "type": "TypeName"
    }
  },
  "Table": {
    "fields": {
      "table": "Name",
      "indextype": "TypeName",
      "keynames": "TypeName[]",
      "keytypes": "TypeName[]",
      "type": "TypeName"
    },
    "docs": {
      "table": "the name of the table",
      "indextype": "the kind of index, i64, i128i128, etc",
      "keynames": "names for the keys defined by keytype",
      "keytype": "the meaning / type of key parameters, how to convert binary key to json",
      "type": "the meaning / type of the binary data stored in this table"
    }
  },
  "Abi": {
    "fields": {
      "types": "TypeDef[]",
      "structs": "Struct[]",
      "actions": "Action[]",
      "tables": "Table[]"
    }
  },
  "transfer": {
    "fields": {
      "from": "AccountName",
      "to": "AccountName",
      "amount": "UInt64",
      "memo": "String"
    },
    "docs": {
      "from": "may not be the message.sender if message.sender has delegated authority by from"
    }
  },
  "lock": {
    "fields": {
      "from": "AccountName",
      "to": "AccountName",
      "amount": "ShareType"
    }
  },
  "unlock": {
    "fields": {
      "account": "AccountName",
      "amount": "ShareType"
    }
  },
  "claim": {
    "fields": {
      "account": "AccountName",
      "amount": "ShareType"
    }
  },
  "newaccount": {
    "fields": {
      "creator": "AccountName",
      "name": "AccountName",
      "owner": "Authority",
      "active": "Authority",
      "recovery": "Authority",
      "deposit": "Asset"
    }
  },
  "setcode": {
    "fields": {
      "account": "AccountName",
      "vmtype": "UInt8",
      "vmversion": "UInt8",
      "code": "Bytes",
      "abi": "Abi"
    },
    "docs": {
      "account": "the account that is handling the message",
      "vmtype": "the virtual machine type",
      "vmversion": "the virtual machine version",
      "code": "the apply",
      "abi": "the interface description of the code"
    }
  },
  "setproducer": {
    "fields": {
      "name": "AccountName",
      "key": "PublicKey",
      "configuration": "BlockchainConfiguration"
    }
  },
  "okproducer": {
    "fields": {
      "voter": "AccountName",
      "producer": "AccountName",
      "approve": "Int8"
    },
    "docs": {
      "voter": "The account casting a vote",
      "producer": "The producer being voted on",
      "approve": "1 to approve, or 0 to disapprove"
    }
  },
  "setproxy": {
    "fields": {
      "stakeholder": "AccountName",
      "proxy": "AccountName"
    },
    "docs": {
      "stakeholder": "The account with stake to be proxied",
      "proxy": "The account to cast votes with stakeholder's stake weight"
    }
  },
  "updateauth": {
    "fields": {
      "account": "AccountName",
      "permission": "PermissionName",
      "parent": "PermissionName",
      "authority": "Authority"
    }
  },
  "deleteauth": {
    "fields": {
      "account": "AccountName",
      "permission": "PermissionName"
    }
  },
  "linkauth": {
    "fields": {
      "account": "AccountName",
      "code": "AccountName",
      "type": "FuncName",
      "requirement": "PermissionName"
    },
    "docs": {
      "account": "The account to require permissions for",
      "code": "The contract to require permissions to invoke",
      "requirement": "The permission name to require"
    }
  },
  "unlinkauth": {
    "fields": {
      "account": "AccountName",
      "code": "AccountName",
      "type": "FuncName"
    },
    "docs": {
      "account": "The account to require permissions for",
      "code": "The contract to require permissions to invoke"
    }
  }
}
